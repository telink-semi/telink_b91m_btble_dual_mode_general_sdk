/********************************************************************************************************
 * @file    ram_boot.link
 *
 * @brief   This is the link file for B92
 *
 * @author  Driver Group
 * @date    2020
 *
 * @par     Copyright (c) 2020, Telink Semiconductor (Shanghai) Co., Ltd. ("TELINK")
 *
 *          Licensed under the Apache License, Version 2.0 (the "License");
 *          you may not use this file except in compliance with the License.
 *          You may obtain a copy of the License at
 *
 *              http://www.apache.org/licenses/LICENSE-2.0
 *
 *          Unless required by applicable law or agreed to in writing, software
 *          distributed under the License is distributed on an "AS IS" BASIS,
 *          WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *          See the License for the specific language governing permissions and
 *          limitations under the License.
 *
 *******************************************************************************************************/
ENTRY(_RESET_ENTRY)
SECTIONS
{
	NDS_SAG_LMA_FLASH = 0x00000000 ;
	
	. = 0x00000000;
	
	PROVIDE (BIN_BEGIN = .);
	
	.ram_boot 	: { KEEP(*(.ram_boot )) }
	/* By default,the aes_data section can only be used in the first 64K of IRAM, */
	/* please do not change the position of this section,unless you know the correct way to use */ 
	/* For more details, see the aes_set_em_base_addr() function*/
	. = ALIGN(8);
	PROVIDE (_AES_VMA_START = .);
	.aes_data 	(NOLOAD)	: { KEEP(*(.aes_data )) }
	PROVIDE (_AES_VMA_END = .);
	. = ALIGN(8);
	.retention_data : 
		{ KEEP(*(.retention_data )) }
	. = ALIGN(8);
	.ram_code	: 
	  	{ KEEP(*(.ram_code )) }

	.text 		: 
		{ *(.text .stub .text.* .gnu.linkonce.t.* ) KEEP(*(.text.*personality* )) *(.gnu.warning ) . = ALIGN(4); }
	
	.rodata 	: 
		{ *(.rodata .rodata.* .gnu.linkonce.r.* )}
		
	.eh_frame_hdr 	: 
		{ *(.eh_frame_hdr ) }
	. = ALIGN(0x20);
	.eh_frame 	: AT(ALIGN(LOADADDR (.eh_frame_hdr) + SIZEOF (.eh_frame_hdr),  0X20))
		{ KEEP(*(.eh_frame )) }
		
	.exec.itable 	: 
		{ KEEP(*(.exec.itable)) }
		
	. = ALIGN(8);
	PROVIDE( __global_pointer$ = . + (4K / 2) );
	.data	: 
		{ *(.data .data.* .gnu.linkonce.d.* ) KEEP(*(.gnu.linkonce.d.*personality* )) SORT(CONSTRUCTORS) 
		  *(.srodata.cst16 ) *(.srodata.cst8 ) *(.srodata.cst4 ) *(.srodata.cst2 ) *(.srodata .srodata.* ) *(.sdata .sdata.* .gnu.linkonce.s.* ) *(.sdata2 .sdata2.* .gnu.linkonce.s.* )
		}
	. = ALIGN(8);
	PROVIDE (_BSS_VMA_START = .);
	.sbss 		: { *(.dynsbss ) *(.sbss .sbss.* .gnu.linkonce.sb.* ) *(.scommon .scommon.* ) }
	.bss 		: { *(.dynbss ) *(.bss .bss.* .gnu.linkonce.b.* ) *(COMMON ) . = ALIGN(8); }
	PROVIDE (_BSS_VMA_END = .);
	
	.sdk_version  	: 
		{ KEEP(*(.sdk_version )) }
	
	. = ALIGN(8);
	/* end is the starting address of the heap, the heap grows upward */
	_end = .;
	PROVIDE (end = .);	
	PROVIDE (_STACK_TOP = 0x0020000 + (0x0020000*__IRAM_2_EN) + (0x0060000*__DRAM_1_EN) + (0x0020000*__DRAM_2_EN));

}
