/********************************************************************************************************
 * @file	boot_overlay.link
 *
 * @brief	This is the link file for BTBLE SDK
 *
 * @author	BTBLE GROUP
 * @date	2022
 *
 * @par     Copyright (c) 2022, Telink Semiconductor (Shanghai) Co., Ltd. ("TELINK")
 *
 *          Licensed under the Apache License, Version 2.0 (the "License");
 *          you may not use this file except in compliance with the License.
 *          You may obtain a copy of the License at
 *
 *              http://www.apache.org/licenses/LICENSE-2.0
 *
 *          Unless required by applicable law or agreed to in writing, software
 *          distributed under the License is distributed on an "AS IS" BASIS,
 *          WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *          See the License for the specific language governing permissions and
 *          limitations under the License.
 *
 *******************************************************************************************************/
 
ENTRY(_RESET_ENTRY)
SECTIONS
{
	NDS_SAG_LMA_FLASH = 0x20000000 ;
	
	. = 0x20000000;	
	PROVIDE (BIN_BEGIN = .);
	.vectors 		: AT(0x20000000)
	    { KEEP(*(.vectors )) }

	. = 0x00000000;
	.retention_reset	: AT( ALIGN(LOADADDR (.vectors) + SIZEOF (.vectors),8)) 
	  	{ KEEP(*(.retention_reset )) }
	PROVIDE (_RETENTION_RESET_VMA_START = ADDR(.retention_reset));
	PROVIDE (_RETENTION_RESET_LMA_START = LOADADDR(.retention_reset));
	PROVIDE (_RETENTION_RESET_VMA_END = .); 
	/*EM_BASE_IRAM_OFFSET */
	. = 0x00000200;
	PROVIDE (_EXCHANGE_MEM_VMA_START = .);
	.exchange_mem (NOLOAD): { KEEP(*(.exchange_mem )) }
	PROVIDE (_EXCHANGE_MEM_VMA_END = .); 

	/* By default,the aes_data section can only be used in the first 64K of IRAM, */
	/* please do not change the position of this section,unless you know the correct way to use */ 
	/*
	. = ALIGN(8);
	PROVIDE (_AES_VMA_START = .);
	.aes_data 	(NOLOAD)	: { KEEP(*(.aes_data )) }
	PROVIDE (_AES_VMA_END = .);
	*/
	
	/* To count the size*/
	. = ALIGN(8);	
	.ble_retention_data (NOLOAD) : { KEEP(*(.ble_retention_data )) }
	.bt_retention_data  (NOLOAD) : { KEEP(*(.bt_retention_data )) }
	
	. = ALIGN(8);	
	.retention_data : AT( ALIGN(LOADADDR (.retention_reset) + SIZEOF (.retention_reset),8)) 
		{ KEEP(*(.retention_data )) }
	PROVIDE (_RETENTION_DATA_VMA_START = ADDR(.retention_data));
	PROVIDE (_RETENTION_DATA_LMA_START = LOADADDR(.retention_data) + 0x0000);
	PROVIDE (_RETENTION_DATA_VMA_END = .); 
	
	/* To count the size*/
	. = ALIGN(8);	
	.ble_retention_code (NOLOAD) : { KEEP(*(.ble_retention_code )) }
	.bt_retention_code  (NOLOAD) : { KEEP(*(.bt_retention_code )) }
	
	. = ALIGN(8);
	.retention_code	: AT( ALIGN(LOADADDR (.retention_data) + SIZEOF (.retention_data),8))  
	  	{ KEEP(*(.retention_code )) }
	PROVIDE (_RETENTION_CODE_VMA_START = ADDR(.retention_code));
	PROVIDE (_RETENTION_CODE_VMA_END = .); 
	PROVIDE (_RETENTION_CODE_LMA_START = LOADADDR(.retention_code) + 0x0000 );
	
	/* To count the size*/
	. = ALIGN(8);	
	.ble_ram_code (NOLOAD) : { KEEP(*(.ble_ram_code )) }
	.bt_ram_code  (NOLOAD) : { KEEP(*(.bt_ram_code )) }
	
	. = ALIGN(8);
	.ram_code	: AT( ALIGN(LOADADDR (.retention_code) + SIZEOF (.retention_code),8))  
	  	{ KEEP(*(.ram_code )) KEEP(*(.text.nds_*)) KEEP(*(.rodata.nds_cos_table_q15_1024)) }
	PROVIDE (_RAMCODE_VMA_START = ADDR(.ram_code));
	PROVIDE (_RAMCODE_VMA_END = .); 
	PROVIDE (_RAMCODE_LMA_START = LOADADDR(.ram_code) + 0x0000 );
	
	
	. = ALIGN(8);
	__ovly_vmastart = .;
	.nds32.fixed.size = .;
	OVERLAY __ovly_vmastart : AT(LOADADDR (.ram_code) + SIZEOF (.ram_code))
	{
		.overlay0{ KEEP(*(.overlay0)) }
		.overlay1{ KEEP(*(.overlay1)) }
	}
	. = ALIGN(8);
	__ovly_vmastart = .;
	OVERLAY __ovly_vmastart : AT(LOADADDR (.overlay1) + SIZEOF (.overlay1))
	{
		.overlay2{ KEEP(*(.overlay2)) }
		.overlay3{ KEEP(*(.overlay3)) }
	}
	
	. = ALIGN(8);
	.iram_data (NOLOAD): 
		{ KEEP(*(.iram_data )) }
	PROVIDE (iram_end = .);	
	
			
	. = ALIGN(LOADADDR (.overlay3) + SIZEOF (.overlay3),8) + 0x0000;
	.text 			: AT(ALIGN(LOADADDR (.overlay3) + SIZEOF (.overlay3), 8)) 
		{ *(.text .stub .text.* .gnu.linkonce.t.* ) KEEP(*(.text.*personality* )) *(.gnu.warning )  }
	.rodata 		: AT(ALIGN(LOADADDR (.text) + SIZEOF (.text), ALIGNOF(.rodata))) 
		{ *(.rodata .rodata.* .gnu.linkonce.r.* )
		  *(.srodata.cst16 ) *(.srodata.cst8 ) *(.srodata.cst4 ) *(.srodata.cst2 ) *(.srodata .srodata.* )
		  *(.sdata2 .sdata2.* .gnu.linkonce.s.* )
		}
	.eh_frame_hdr 	: AT(ALIGN(LOADADDR (.rodata) + SIZEOF (.rodata), ALIGNOF(.eh_frame_hdr)))
		{ *(.eh_frame_hdr ) }
	. = ALIGN(0x20);
	.eh_frame 	: AT(ALIGN(LOADADDR (.eh_frame_hdr) + SIZEOF (.eh_frame_hdr), 32))
		{ KEEP(*(.eh_frame )) }
		
	.exec.itable 	: AT(ALIGN(LOADADDR (.eh_frame) + SIZEOF (.eh_frame), ALIGNOF(.exec.itable)))
		{ KEEP(*(.exec.itable)) }

	
				
	. = 0x00080000;
	PROVIDE( __global_pointer$ = . + (4K / 2) );
	
	. = ALIGN(4);
	.nds32.ovly.tbl	:	AT(LOADADDR (.exec.itable) + SIZEOF (.exec.itable))
	{
		_ovly_table = .;
		LONG(ABSOLUTE(ADDR(.overlay0)));
		LONG(SIZEOF(.overlay0));
		LONG(ABSOLUTE(LOADADDR(.overlay0)));
		LONG(0);
		LONG(ABSOLUTE(ADDR(.overlay1)));
		LONG(SIZEOF(.overlay1));
		LONG(ABSOLUTE(LOADADDR(.overlay1)));
		LONG(0);
		LONG(ABSOLUTE(ADDR(.overlay2)));
		LONG(SIZEOF(.overlay2));
		LONG(ABSOLUTE(LOADADDR(.overlay2)));
		LONG(0);
		LONG(ABSOLUTE(ADDR(.overlay3)));
		LONG(SIZEOF(.overlay3));
		LONG(ABSOLUTE(LOADADDR(.overlay3)));
		LONG(0);
		_novlys = .;
		LONG((_novlys - _ovly_table) / 16);
		. = ALIGN(8);
	}
	
	.data	: AT(ALIGN(LOADADDR (.nds32.ovly.tbl) + SIZEOF (.nds32.ovly.tbl),  ALIGNOF(.data)))
		{ *(.data .data.* .gnu.linkonce.d.* ) KEEP(*(.gnu.linkonce.d.*personality* )) SORT(CONSTRUCTORS) 
		  *(.sdata .sdata.* .gnu.linkonce.s.* ) 
		}
    PROVIDE (_DATA_VMA_END = .);	
    PROVIDE (_DATA_VMA_START = ADDR(.nds32.ovly.tbl));
	PROVIDE (_DATA_LMA_START = LOADADDR(.nds32.ovly.tbl));
	PROVIDE (BIN_SIZE = LOADADDR(.data) + SIZEOF(.data) - BIN_BEGIN);
	
	. = ALIGN(8);
	PROVIDE (_BSS_VMA_START = .);
	.sbss 	(NOLOAD)	: { *(.dynsbss ) *(.sbss .sbss.* .gnu.linkonce.sb.* ) *(.scommon .scommon.* ) }
	.bss 	(NOLOAD)	: { *(.dynbss ) *(.bss .bss.* .gnu.linkonce.b.* ) *(COMMON ) . = ALIGN(8); }
	PROVIDE (_BSS_VMA_END = .);
	
	. = ALIGN(8);
	.data_no_init 	(NOLOAD)	: { *(.data_no_init .data_no_init.* ) }
	
	. = ALIGN(8);
	/* end is the starting address of the heap, the heap grows upward */
	_end = .;
	PROVIDE (end = .);		
	PROVIDE (_STACK_TOP = 0x00a0000);/*Need to prevent stack overflow*/
	PROVIDE (IRAM_SIZE  = 0x0020000);
	PROVIDE (FLASH_SIZE = 0x0300000);
}

ASSERT((iram_end)<=  IRAM_SIZE, "IRAM OVERFLOW");
/* ASSERT((BIN_SIZE)<= FLASH_SIZE, "BIN FILE OVERFLOW"); */
